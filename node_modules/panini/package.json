{
  "_from": "panini@^1.6.3",
  "_id": "panini@1.6.3",
  "_inBundle": false,
  "_integrity": "sha512-PJKGQ33isifBasMcQjd5wcBl0pBuD3R1jZbBUN05RKf3ZrCjEaf205RDtlCLAAsXovuNEfgWiLo0/TWThIaLCg==",
  "_location": "/panini",
  "_phantomChildren": {
    "abbrev": "1.1.1",
    "arr-flatten": "1.1.0",
    "core-util-is": "1.0.2",
    "duplexify": "3.7.1",
    "expand-range": "1.8.2",
    "extend": "3.0.2",
    "filename-regex": "2.0.1",
    "glob-parent": "3.1.0",
    "graceful-fs": "4.1.15",
    "gulp-sourcemaps": "1.6.0",
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "is-buffer": "1.1.6",
    "is-extendable": "0.1.1",
    "is-posix-bracket": "0.1.1",
    "is-stream": "1.1.0",
    "lazystream": "1.0.0",
    "lodash.isequal": "4.5.0",
    "merge-stream": "1.0.1",
    "minimatch": "3.0.4",
    "mkdirp": "0.5.1",
    "normalize-path": "2.1.1",
    "object-assign": "4.1.1",
    "object.omit": "2.0.1",
    "once": "1.4.0",
    "osenv": "0.1.5",
    "parse-glob": "3.0.4",
    "path-is-absolute": "1.0.1",
    "preserve": "0.2.0",
    "readable-stream": "2.3.6",
    "regex-cache": "0.4.4",
    "repeat-element": "1.1.3",
    "strip-bom": "2.0.0",
    "strip-bom-stream": "1.0.0",
    "through2": "2.0.5",
    "unique-stream": "2.3.1",
    "vali-date": "1.0.0",
    "xtend": "4.0.1"
  },
  "_requested": {
    "escapedName": "panini",
    "fetchSpec": "^1.6.3",
    "name": "panini",
    "raw": "panini@^1.6.3",
    "rawSpec": "^1.6.3",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/panini/-/panini-1.6.3.tgz",
  "_shasum": "aca6a9f575cf198ed539de87a7c24f81e92257ea",
  "_shrinkwrap": null,
  "_spec": "panini@^1.6.3",
  "_where": "/home/smedov/GULP_lesson",
  "author": {
    "email": "foundation@zurb.com",
    "name": "ZURB",
    "url": "http://zurb.com"
  },
  "bin": {
    "panini": "./bin/panini.js"
  },
  "bugs": {
    "url": "https://github.com/zurb/panini/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "deepmerge": "^1.3.2",
    "front-matter": "^2.0.5",
    "glob": "^7.0.0",
    "handlebars": "^4.0.5",
    "highlight.js": "^8.9.1",
    "js-yaml": "^3.5.2",
    "marked": "^0.3.14",
    "nopt": "^4.0.1",
    "slash": "^1.0.0",
    "strip-bom": "2.0.0",
    "through2": "^2.0.0",
    "vinyl-fs": "^2.4.4"
  },
  "deprecated": false,
  "description": "A super tiny flat file compiler.",
  "devDependencies": {
    "assert-dir-equal": "^1.0.1",
    "babel": "^6.3.26",
    "babel-preset-es2015": "^6.3.13",
    "babel-register": "^6.4.3",
    "babel-runtime": "^6.3.19",
    "coveralls": "^2.11.6",
    "gulp": "^3.8.11",
    "mocha": "^3.2.0",
    "mocha-lcov-reporter": "^1.0.0",
    "vinyl-fs": "^2.3.1"
  },
  "homepage": "https://github.com/zurb/panini#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "panini",
  "optionalDependencies": {},
  "readme": "# Panini\n\n[![Build Status](https://travis-ci.org/zurb/panini.svg?branch=master)](https://travis-ci.org/zurb/panini) [![npm version](https://badge.fury.io/js/panini.svg)](https://badge.fury.io/js/panini) [![Coverage Status](https://coveralls.io/repos/zurb/panini/badge.svg?branch=master&service=github)](https://coveralls.io/github/zurb/panini?branch=master) [![Dependency Status](https://david-dm.org/zurb/panini.svg)](https://david-dm.org/zurb/panini)\n\nA super simple flat file generator for use with Gulp. It compiles a series of HTML **pages** using a common **layout**. These pages can also include HTML **partials**, external Handlebars **helpers**, or external **data** as JSON or YAML.\n\nPanini isn't a full-fledged static site generator&mdash;rather, it solves the very specific problem of assembling flat files from common elements, using a templating language.\n\n## Installation\n\n```bash\nnpm install panini --save-dev\n```\n\n## Usage\n\nFeed Panini a stream of HTML files, and get a delicious flattened site out the other end.\n\n```js\nvar gulp = require('gulp');\nvar panini = require('panini');\n\ngulp.task('default', function() {\n  gulp.src('pages/**/*.html')\n    .pipe(panini({\n      root: 'pages/',\n      layouts: 'layouts/',\n      partials: 'partials/',\n      helpers: 'helpers/',\n      data: 'data/'\n    }))\n    .pipe(gulp.dest('build'));\n});\n```\n\nNote that Panini loads layouts, partials, helpers, and data files once on first run. Whenever these files change, call `panini.refresh()` to get it up to date. You can easily do this inside a call to `gulp.watch()`:\n\n```js\ngulp.watch(['./src/{layouts,partials,helpers,data}/**/*'], [panini.refresh]);\n```\n\n## Options\n\n### `root`\n\n**Type:** `String`\n\nPath to the root folder all pages live in. This option does not pull in the files themselves for processing&mdash;that's what `gulp.src()` is for. This setting tells Panini what the common root of your site's pages is.\n\n### `layouts`\n\n**Type:** `String`\n\nPath to a folder containing layouts. Layout files can have the extension `.html`, `.hbs`, or `.handlebars`. One layout must be named `default`. To use a layout other than the default on a specific page, override it in the Front Matter on that page.\n\n```html\n---\nlayout: post\n---\n\n<!-- Uses layouts/post.html as the template -->\n```\n\nAll layouts have a special Handlebars partial called `body` which contains the contents of the page.\n\n```html\n<!-- Header up here -->\n{{> body}}\n<!-- Footer down here -->\n```\n\n### `pageLayouts`\n\n**Type:** `Object`\n\nA list of presets for page layouts, grouped by folder. This allows you to automatically set all pages within a certain folder to have the same layout.\n\n```js\npanini({\n  root: 'src/pages/',\n  layouts: 'src/layouts/',\n  pageLayouts: {\n    // All pages inside src/pages/blog will use the blog.html layout\n    'blog': 'blog'\n  }\n})\n```\n\n### `partials`\n\n**Type:** `String`\n\nPath to a folder containing HTML partials. Partial files can have the extension `.html`, `.hbs`, or `.handlebars`. Each will be registered as a Handlebars partial which can be accessed using the name of the file. (The path to the file doesn't matter&mdash;only the name of the file itself is used.)\n\n```html\n<!-- Renders partials/header.html -->\n{{> header}}\n```\n\n### `helpers`\n\n**Type:** `String`\n\nPath to a folder containing Handlebars helpers. Handlebars helpers are `.js` files which export a function via `module.exports`. The name used to register the helper is the same as the name of the file.\n\nFor example, a file named `markdown.js` that exports this function would add a Handlebars helper called `{{markdown}}`.\n\n```js\nvar marked = require('marked');\n\nmodule.exports = function(text) {\n  return marked(text);\n}\n```\n\n### `data`\n\n**Type:** `String`\n\nPath to a folder containing external data, which will be passed in to every page. Data can be formatted as JSON (`.json`) or YAML (`.yml`). Within a template, the data is stored within a variable with the same name as the file it came from.\n\nFor example, a file named `contact.json` with key/value pairs such as the following:\n\n```js\n{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@gmail.com\",\n    \"phone\": \"555-1212\"\n}\n```\n\nCould be used to output the value of John Doe within a template using the Handlebars syntax of `{{contact.name}}`.\n\nData can also be a `.js` file with a `module.exports`. The data returned by the export function will be used.\n\nData can also be inserted into the page itself with a Front Matter template at the top of the file.\n\nLastly, the reserved `page` variable is added to every page template as it renders. It contains the name of the page being rendered, without the extension.\n\n## CLI\n\nYou can also use panini via the CLI.\n\n```\nUsage: panini --layouts=[layoutdir] --root=[rootdir] --output=[destdir] [other options] 'pagesglob'\n\nOptions:\n  --layouts  (required) path to a folder containing layouts\n  --root     (required) path to the root folder all pages live in\n  --output     (required) path to the folder compiled pages should get sent to\n  --partials            path to root folder for partials\n  --helpers             path to folder for additional helpers\n  --data                path to folder for additional data\n\nthe argument pagesglob should be a glob describing what pages you want to apply panini to.\n\nExample: panini --root=src/pages --layouts=src/layouts --partials=src/partials --data=src/data --output=dist 'src/pages/**/*.html'\n```\n\n## Local Development\n\n```bash\ngit clone https://github.com/zurb/panini\ncd panini\nnpm install\n```\n\nUse `npm test` to run tests.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zurb/panini.git"
  },
  "scripts": {
    "test": "mocha --compilers js:babel-register --reporter nyan"
  },
  "version": "1.6.3"
}
